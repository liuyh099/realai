<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.realai.online.core.dao.BatchRecordDao">
    <resultMap type="cn.realai.online.core.entity.BatchRecord" id="BatchRecordMap">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="y_table" property="ytableDataSource" jdbcType="VARCHAR"/>
        <result column="x_table_homo" property="xtableHomogeneousDataSource" jdbcType="VARCHAR"/>
        <result column="x_table_heter" property="xtableHeterogeneousDataSource" jdbcType="VARCHAR"/>
        <result column="experiment_id" property="experimentId" jdbcType="BIGINT"/>
        <result column="service_id" property="serviceId" jdbcType="BIGINT"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="down_url" property="downUrl" jdbcType="VARCHAR"/>
        <result column="batch_type" property="batchType" jdbcType="INTEGER"/>
        <result column="batch_name" property="batchName" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insert">
    	<selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID() AS id
		</selectKey>
        INSERT INTO batch_record (y_table , x_table_homo, x_table_Heter, experiment_id, service_id,
        	create_time, down_url, batch_type, batch_name)
        VALUE (#{batchRecord.ytableDataSource},#{batchRecord.xtableHomogeneousDataSource},
        	#{batchRecord.xtableHeterogeneousDataSource},#{batchRecord.experimentId},#{batchRecord.serviceId},
        	#{batchRecord.createTime},#{batchRecord.downUrl},#{batchRecord.batchType},#{batchRecord.batchName})
    </insert>

    <update id="update" parameterType="cn.realai.online.core.entity.BatchRecord">
        UPDATE batch_record
        <trim prefix="set" suffixOverrides=",">
            <if test="downUrl!=null">down_url=#{downUrl},</if>
        </trim>
        <where>
            id =#{id}
        </where>
    </update>


    <select id="get" resultMap="BatchRecordMap" parameterType="java.lang.Long">
        SELECT * from batch_record
        <where>
            id =#{id}
        </where>
    </select>


    <resultMap type="cn.realai.online.core.bo.BatchListBO" id="BatchListMap">
        <result column="batchId" property="batchId" jdbcType="BIGINT"/>
        <result column="modelId" property="modelId" jdbcType="BIGINT"/>
        <result column="modelName" property="modelName" jdbcType="VARCHAR"/>
        <result column="experimentId" property="experimentId" jdbcType="BIGINT"/>
        <result column="experimentName" property="experimentName" jdbcType="VARCHAR"/>
        <result column="releaseTime" property="releaseTime" jdbcType="BIGINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="serviceId" property="serviceId" jdbcType="BIGINT"/>
        <result column="serviceName" property="serviceName" jdbcType="VARCHAR"/>
        <result column="batchTimes" property="batchTimes" jdbcType="INTEGER"/>
        <result column="downUrl" property="downUrl" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="selectList" resultMap="BatchListMap">
        select br.id as batchId,
        m.id as modelId,
        m.name as modelName,
        ep.id as experimentId,
        ep.name as experimentName,
        ep.release_time as releaseTime,
        ep.status as status,
        s.id as serviceId,
        s.name as serviceName,
        s.batch_times as batchTimes,
        br.down_url as downUrl,
        br.remark as remark
        from batch_record as br
        join service as s on br.service_id = s.id
        join experiment as ep on br.experiment_id = ep.id
        join model as m on br.experiment_id = m.experiment_id
        <where>
            <if test="batchListBO!=null and batchListBo.modelName!=null">
                and m.name like '%${name}%'
            </if>
            <if test="batchListBO!=null and batchListBo.status!=null">
                and ep.status = #{batchListBO.status}
            </if>
            <if test="minDate!=null">
                and <![CDATA[ ep.release_time >= #{minDate} ]]>
            </if>
            <if test="maxDate!=null">
                and <![CDATA[ ep.release_time <= #{maxDate} ]]>
            </if>
        </where>
        order by br.create_time desc
    </select>

</mapper>